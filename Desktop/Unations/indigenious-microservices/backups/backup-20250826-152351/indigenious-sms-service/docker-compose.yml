version: '3.8'

services:
  sms-service:
    build: .
    ports:
      - "3045:3045"
    environment:
      - NODE_ENV=production
      - PORT=3045
      - DATABASE_URL=postgresql://sms_user:sms_pass@sms-db:5432/indigenous_sms_db
      - REDIS_URL=redis://sms-redis:6379
      - REDIS_HOST=sms-redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      # Twilio Configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      # AWS SNS Configuration
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      # Nexmo Configuration
      - NEXMO_API_KEY=${NEXMO_API_KEY}
      - NEXMO_API_SECRET=${NEXMO_API_SECRET}
      # Plivo Configuration
      - PLIVO_AUTH_ID=${PLIVO_AUTH_ID}
      - PLIVO_AUTH_TOKEN=${PLIVO_AUTH_TOKEN}
      # ClickSend Configuration
      - CLICKSEND_USERNAME=${CLICKSEND_USERNAME}
      - CLICKSEND_API_KEY=${CLICKSEND_API_KEY}
      # MessageBird Configuration
      - MESSAGEBIRD_API_KEY=${MESSAGEBIRD_API_KEY}
      # Default settings
      - DEFAULT_FROM_NUMBER=${DEFAULT_FROM_NUMBER}
    depends_on:
      - sms-db
      - sms-redis
    networks:
      - sms-network
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3045/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./logs:/app/logs

  sms-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=indigenous_sms_db
      - POSTGRES_USER=sms_user
      - POSTGRES_PASSWORD=sms_pass
    volumes:
      - sms-db-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5451:5432"
    networks:
      - sms-network
    restart: unless-stopped

  sms-redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6401:6379"
    volumes:
      - sms-redis-data:/data
    networks:
      - sms-network
    restart: unless-stopped

  # SMS queue monitoring
  bull-board:
    image: deadly0/bull-board:latest
    environment:
      - REDIS_HOST=sms-redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
    ports:
      - "3046:3000"
    depends_on:
      - sms-redis
    networks:
      - sms-network
    restart: unless-stopped

  # SMS analytics and monitoring
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    ports:
      - "3047:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - sms-db
      - sms-redis
    networks:
      - sms-network
    restart: unless-stopped

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9092:9090"
    volumes:
      - ./prometheus/sms-prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - sms-network
    restart: unless-stopped

  # Node exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9102:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - sms-network
    restart: unless-stopped

  # SMS webhook gateway (for handling provider webhooks)
  webhook-gateway:
    image: nginx:alpine
    ports:
      - "3048:80"
    volumes:
      - ./nginx/sms-webhook.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - sms-service
    networks:
      - sms-network
    restart: unless-stopped

  # Emergency broadcast system
  emergency-broadcaster:
    build: .
    command: ["node", "dist/emergency-broadcaster.js"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://sms_user:sms_pass@sms-db:5432/indigenous_sms_db
      - REDIS_URL=redis://sms-redis:6379
      - EMERGENCY_MODE=true
    depends_on:
      - sms-db
      - sms-redis
    networks:
      - sms-network
    restart: unless-stopped

  # Delivery report processor
  delivery-processor:
    build: .
    command: ["node", "dist/delivery-processor.js"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://sms_user:sms_pass@sms-db:5432/indigenous_sms_db
      - REDIS_URL=redis://sms-redis:6379
    depends_on:
      - sms-db
      - sms-redis
    networks:
      - sms-network
    restart: unless-stopped

  # Elasticsearch for SMS search and analytics
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9202:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - sms-network
    restart: unless-stopped

  # Kibana for SMS analytics dashboard
  kibana:
    image: kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5603:5601"
    depends_on:
      - elasticsearch
    networks:
      - sms-network
    restart: unless-stopped

  # SMS load balancer (for high availability)
  haproxy:
    image: haproxy:alpine
    ports:
      - "8080:80"
      - "8404:8404"
    volumes:
      - ./haproxy/haproxy-sms.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    depends_on:
      - sms-service
    networks:
      - sms-network
    restart: unless-stopped

volumes:
  sms-db-data:
    driver: local
  sms-redis-data:
    driver: local
  grafana-data:
    driver: local
  prometheus-data:
    driver: local
  elasticsearch-data:
    driver: local

networks:
  sms-network:
    driver: bridge
  microservices-network:
    external: true